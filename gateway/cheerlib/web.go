package cheerlib

import (
	"bufio"
	"errors"
	"fmt"
	"github.com/klauspost/compress/zip"
	"io/ioutil"
	"path"
	"strings"
)

func WebGetContentType(urlPath string) string {

	sData := "text/html; charset=utf-8"

	xMimeDataContent := "fGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbQozMjN8dGV4dC9oMzIzCmFjeHxhcHBsaWNhdGlvbi9pbnRlcm5ldC1wcm9wZXJ0eS1zdHJlYW0KYWl8YXBwbGljYXRpb24vcG9zdHNjcmlwdAphaWZ8YXVkaW8veC1haWZmCmFpZmN8YXVkaW8veC1haWZmCmFpZmZ8YXVkaW8veC1haWZmCmFzZnx2aWRlby94LW1zLWFzZgphc3J8dmlkZW8veC1tcy1hc2YKYXN4fHZpZGVvL3gtbXMtYXNmCmF1fGF1ZGlvL2Jhc2ljCmF2aXx2aWRlby94LW1zdmlkZW8KYXhzfGFwcGxpY2F0aW9uL29sZXNjcmlwdApiYXN8dGV4dC9wbGFpbgpiY3Bpb3xhcHBsaWNhdGlvbi94LWJjcGlvCmJpbnxhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0KYm1wfGltYWdlL2JtcApjfHRleHQvcGxhaW4KY2F0fGFwcGxpY2F0aW9uL3ZuZC5tcy1wa2lzZWNjYXQKY2RmfGFwcGxpY2F0aW9uL3gtY2RmCmNlcnxhcHBsaWNhdGlvbi94LXg1MDktY2EtY2VydApjbGFzc3xhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0KY2xwfGFwcGxpY2F0aW9uL3gtbXNjbGlwCmNteHxpbWFnZS94LWNteApjb2R8aW1hZ2UvY2lzLWNvZApjcGlvfGFwcGxpY2F0aW9uL3gtY3BpbwpjcmR8YXBwbGljYXRpb24veC1tc2NhcmRmaWxlCmNybHxhcHBsaWNhdGlvbi9wa2l4LWNybApjcnR8YXBwbGljYXRpb24veC14NTA5LWNhLWNlcnQKY3NofGFwcGxpY2F0aW9uL3gtY3NoCmNzc3x0ZXh0L2NzcwpkY3J8YXBwbGljYXRpb24veC1kaXJlY3RvcgpkZXJ8YXBwbGljYXRpb24veC14NTA5LWNhLWNlcnQKZGlyfGFwcGxpY2F0aW9uL3gtZGlyZWN0b3IKZGxsfGFwcGxpY2F0aW9uL3gtbXNkb3dubG9hZApkbXN8YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtCmRvY3xhcHBsaWNhdGlvbi9tc3dvcmQKZG90fGFwcGxpY2F0aW9uL21zd29yZApkdml8YXBwbGljYXRpb24veC1kdmkKZHhyfGFwcGxpY2F0aW9uL3gtZGlyZWN0b3IKZXBzfGFwcGxpY2F0aW9uL3Bvc3RzY3JpcHQKZXR4fHRleHQveC1zZXRleHQKZXZ5fGFwcGxpY2F0aW9uL2Vudm95CmV4ZXxhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0KZmlmfGFwcGxpY2F0aW9uL2ZyYWN0YWxzCmZscnx4LXdvcmxkL3gtdnJtbApnaWZ8aW1hZ2UvZ2lmCmd0YXJ8YXBwbGljYXRpb24veC1ndGFyCmd6fGFwcGxpY2F0aW9uL3gtZ3ppcApofHRleHQvcGxhaW4KaGRmfGFwcGxpY2F0aW9uL3gtaGRmCmhscHxhcHBsaWNhdGlvbi93aW5obHAKaHF4fGFwcGxpY2F0aW9uL21hYy1iaW5oZXg0MApodGF8YXBwbGljYXRpb24vaHRhCmh0Y3x0ZXh0L3gtY29tcG9uZW50Cmh0bXx0ZXh0L2h0bWwKaHRtbHx0ZXh0L2h0bWwKaHR0fHRleHQvd2Vidmlld2h0bWwKaWNvfGltYWdlL3gtaWNvbgppZWZ8aW1hZ2UvaWVmCmlpaXxhcHBsaWNhdGlvbi94LWlwaG9uZQppbnN8YXBwbGljYXRpb24veC1pbnRlcm5ldC1zaWdudXAKaXNwfGFwcGxpY2F0aW9uL3gtaW50ZXJuZXQtc2lnbnVwCmpmaWZ8aW1hZ2UvcGlwZWcKanBlfGltYWdlL2pwZWcKanBlZ3xpbWFnZS9qcGVnCmpwZ3xpbWFnZS9qcGVnCmpzfGFwcGxpY2F0aW9uL3gtamF2YXNjcmlwdApsYXRleHxhcHBsaWNhdGlvbi94LWxhdGV4CmxoYXxhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0KbHNmfHZpZGVvL3gtbGEtYXNmCmxzeHx2aWRlby94LWxhLWFzZgpsemh8YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtCm0xM3xhcHBsaWNhdGlvbi94LW1zbWVkaWF2aWV3Cm0xNHxhcHBsaWNhdGlvbi94LW1zbWVkaWF2aWV3Cm0zdXxhdWRpby94LW1wZWd1cmwKbWFufGFwcGxpY2F0aW9uL3gtdHJvZmYtbWFuCm1kYnxhcHBsaWNhdGlvbi94LW1zYWNjZXNzCm1lfGFwcGxpY2F0aW9uL3gtdHJvZmYtbWUKbWh0fG1lc3NhZ2UvcmZjODIyCm1odG1sfG1lc3NhZ2UvcmZjODIyCm1pZHxhdWRpby9taWQKbW55fGFwcGxpY2F0aW9uL3gtbXNtb25leQptb3Z8dmlkZW8vcXVpY2t0aW1lCm1vdmllfHZpZGVvL3gtc2dpLW1vdmllCm1wMnx2aWRlby9tcGVnCm1wM3xhdWRpby9tcGVnCm1wYXx2aWRlby9tcGVnCm1wZXx2aWRlby9tcGVnCm1wZWd8dmlkZW8vbXBlZwptcGd8dmlkZW8vbXBlZwptcHB8YXBwbGljYXRpb24vdm5kLm1zLXByb2plY3QKbXB2Mnx2aWRlby9tcGVnCm1zfGFwcGxpY2F0aW9uL3gtdHJvZmYtbXMKbXZifGFwcGxpY2F0aW9uL3gtbXNtZWRpYXZpZXcKbndzfG1lc3NhZ2UvcmZjODIyCm9kYXxhcHBsaWNhdGlvbi9vZGEKcDEwfGFwcGxpY2F0aW9uL3BrY3MxMApwMTJ8YXBwbGljYXRpb24veC1wa2NzMTIKcDdifGFwcGxpY2F0aW9uL3gtcGtjczctY2VydGlmaWNhdGVzCnA3Y3xhcHBsaWNhdGlvbi94LXBrY3M3LW1pbWUKcDdtfGFwcGxpY2F0aW9uL3gtcGtjczctbWltZQpwN3J8YXBwbGljYXRpb24veC1wa2NzNy1jZXJ0cmVxcmVzcApwN3N8YXBwbGljYXRpb24veC1wa2NzNy1zaWduYXR1cmUKcGJtfGltYWdlL3gtcG9ydGFibGUtYml0bWFwCnBkZnxhcHBsaWNhdGlvbi9wZGYKcGZ4fGFwcGxpY2F0aW9uL3gtcGtjczEyCnBnbXxpbWFnZS94LXBvcnRhYmxlLWdyYXltYXAKcGtvfGFwcGxpY2F0aW9uL3luZC5tcy1wa2lwa28KcG1hfGFwcGxpY2F0aW9uL3gtcGVyZm1vbgpwbWN8YXBwbGljYXRpb24veC1wZXJmbW9uCnBtbHxhcHBsaWNhdGlvbi94LXBlcmZtb24KcG1yfGFwcGxpY2F0aW9uL3gtcGVyZm1vbgpwbXd8YXBwbGljYXRpb24veC1wZXJmbW9uCnBubXxpbWFnZS94LXBvcnRhYmxlLWFueW1hcApwb3QsfGFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50CnBwbXxpbWFnZS94LXBvcnRhYmxlLXBpeG1hcApwcHN8YXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQKcHB0fGFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50CnByZnxhcHBsaWNhdGlvbi9waWNzLXJ1bGVzCnBzfGFwcGxpY2F0aW9uL3Bvc3RzY3JpcHQKcHVifGFwcGxpY2F0aW9uL3gtbXNwdWJsaXNoZXIKcXR8dmlkZW8vcXVpY2t0aW1lCnJhfGF1ZGlvL3gtcG4tcmVhbGF1ZGlvCnJhbXxhdWRpby94LXBuLXJlYWxhdWRpbwpyYXN8aW1hZ2UveC1jbXUtcmFzdGVyCnJnYnxpbWFnZS94LXJnYgpybWl8YXVkaW8vbWlkCnJvZmZ8YXBwbGljYXRpb24veC10cm9mZgpydGZ8YXBwbGljYXRpb24vcnRmCnJ0eHx0ZXh0L3JpY2h0ZXh0CnNjZHxhcHBsaWNhdGlvbi94LW1zc2NoZWR1bGUKc2N0fHRleHQvc2NyaXB0bGV0CnNldHBheXxhcHBsaWNhdGlvbi9zZXQtcGF5bWVudC1pbml0aWF0aW9uCnNldHJlZ3xhcHBsaWNhdGlvbi9zZXQtcmVnaXN0cmF0aW9uLWluaXRpYXRpb24Kc2h8YXBwbGljYXRpb24veC1zaApzaGFyfGFwcGxpY2F0aW9uL3gtc2hhcgpzaXR8YXBwbGljYXRpb24veC1zdHVmZml0CnNuZHxhdWRpby9iYXNpYwpzcGN8YXBwbGljYXRpb24veC1wa2NzNy1jZXJ0aWZpY2F0ZXMKc3BsfGFwcGxpY2F0aW9uL2Z1dHVyZXNwbGFzaApzcmN8YXBwbGljYXRpb24veC13YWlzLXNvdXJjZQpzc3R8YXBwbGljYXRpb24vdm5kLm1zLXBraWNlcnRzdG9yZQpzdGx8YXBwbGljYXRpb24vdm5kLm1zLXBraXN0bApzdG18dGV4dC9odG1sCnN2Z3xpbWFnZS9zdmcreG1sCnN2NGNwaW98YXBwbGljYXRpb24veC1zdjRjcGlvCnN2NGNyY3xhcHBsaWNhdGlvbi94LXN2NGNyYwpzd2Z8YXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2gKdHxhcHBsaWNhdGlvbi94LXRyb2ZmCnRhcnxhcHBsaWNhdGlvbi94LXRhcgp0Y2x8YXBwbGljYXRpb24veC10Y2wKdGV4fGFwcGxpY2F0aW9uL3gtdGV4CnRleGl8YXBwbGljYXRpb24veC10ZXhpbmZvCnRleGluZm98YXBwbGljYXRpb24veC10ZXhpbmZvCnRnenxhcHBsaWNhdGlvbi94LWNvbXByZXNzZWQKdGlmfGltYWdlL3RpZmYKdGlmZnxpbWFnZS90aWZmCnRyfGFwcGxpY2F0aW9uL3gtdHJvZmYKdHJtfGFwcGxpY2F0aW9uL3gtbXN0ZXJtaW5hbAp0c3Z8dGV4dC90YWItc2VwYXJhdGVkLXZhbHVlcwp0eHR8dGV4dC9wbGFpbgp1bHN8dGV4dC9pdWxzCnVzdGFyfGFwcGxpY2F0aW9uL3gtdXN0YXIKdmNmfHRleHQveC12Y2FyZAp2cm1sfHgtd29ybGQveC12cm1sCndhdnxhdWRpby94LXdhdgp3Y218YXBwbGljYXRpb24vdm5kLm1zLXdvcmtzCndkYnxhcHBsaWNhdGlvbi92bmQubXMtd29ya3MKd2tzfGFwcGxpY2F0aW9uL3ZuZC5tcy13b3Jrcwp3bWZ8YXBwbGljYXRpb24veC1tc21ldGFmaWxlCndwc3xhcHBsaWNhdGlvbi92bmQubXMtd29ya3MKd3JpfGFwcGxpY2F0aW9uL3gtbXN3cml0ZQp3cmx8eC13b3JsZC94LXZybWwKd3J6fHgtd29ybGQveC12cm1sCnhhZnx4LXdvcmxkL3gtdnJtbAp4Ym18aW1hZ2UveC14Yml0bWFwCnhsYXxhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwKeGxjfGFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbAp4bG18YXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsCnhsc3xhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwKeGx0fGFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbAp4bHd8YXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsCnhvZnx4LXdvcmxkL3gtdnJtbAp4cG18aW1hZ2UveC14cGl4bWFwCnh3ZHxpbWFnZS94LXh3aW5kb3dkdW1wCnp8YXBwbGljYXRpb24veC1jb21wcmVzcwp6aXB8YXBwbGljYXRpb24vemlw"
	xMimeDataContent = EncryptBase64Decode(xMimeDataContent)

	xScanner := bufio.NewScanner(strings.NewReader(xMimeDataContent))

	for xScanner.Scan() {

		xLine := xScanner.Text()
		xIdex := strings.Index(xLine, "|")
		if xIdex < 1 {
			continue
		}

		xDataKey := "." + xLine[0:xIdex]
		xDataVal := xLine[xIdex+1:]

		if strings.HasSuffix(urlPath, xDataKey) {
			sData = fmt.Sprintf("%s; charset=utf-8", xDataVal)
		}

	}

	return sData

}

func WebReadStaticFile(urlPath string) (error, []byte) {

	xZipFilePath := path.Join(ApplicationBaseDirectory(), "config", "webui.zip")
	return ZipReadStaticFile(xZipFilePath, "dist", urlPath)

}

func ZipReadStaticFile(zipFilePath string, baseDir string, urlPath string) (error, []byte) {

	var xError error = nil
	xFileContent := []byte{}

	if !FileExists(zipFilePath) {
		xError = errors.New(fmt.Sprintf("[%s] Not Found.", zipFilePath))
		return xError, xFileContent
	}

	xZipFile, xZipFileErr := zip.OpenReader(zipFilePath)
	if xZipFileErr != nil {
		xError = xZipFileErr
		return xError, xFileContent
	}

	defer xZipFile.Close()

	xMatchFile := baseDir + urlPath
	xMatchFileWithIndex := xMatchFile
	if strings.HasSuffix(xMatchFileWithIndex, "/") {
		xMatchFileWithIndex = xMatchFileWithIndex + "index.html"
	} else {
		xMatchFileWithIndex = xMatchFileWithIndex + "/index.html"
	}

	xMatchFile = strings.TrimLeft(xMatchFile, "/")
	xMatchFileWithIndex = strings.TrimLeft(xMatchFileWithIndex, "/")

	for _, xZipFileItem := range xZipFile.File {

		if xZipFileItem.FileInfo().IsDir() {
			continue
		}

		xFName := xZipFileItem.Name
		if strings.EqualFold(xFName, xMatchFile) || strings.EqualFold(xFName, xMatchFileWithIndex) {

			xZipItemFile, xZipItemFileErr := xZipFileItem.Open()
			if xZipItemFileErr != nil {
				xError = xZipItemFileErr
				return xError, xFileContent
			}

			defer xZipItemFile.Close()

			xDataBuffer, xDataBufferErr := ioutil.ReadAll(xZipItemFile)
			if xDataBufferErr != nil {
				xError = xDataBufferErr
				return xError, xFileContent
			}

			xFileContent = xDataBuffer
			return xError, xFileContent
		}

	}

	xError = errors.New(fmt.Sprintf("[%s] Not Found.", urlPath))
	return xError, xFileContent

}
